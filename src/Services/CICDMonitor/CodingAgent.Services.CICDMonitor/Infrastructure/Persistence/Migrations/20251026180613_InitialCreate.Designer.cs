// <auto-generated />
using System;
using CodingAgent.Services.CICDMonitor.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CodingAgent.Services.CICDMonitor.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(CICDMonitorDbContext))]
    [Migration("20251026180613_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("cicd_monitor")
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodingAgent.Services.CICDMonitor.Domain.Entities.BuildFailure", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CommitSha")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("ErrorLog")
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("ErrorPattern")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("FailedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JobName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Repository")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("WorkflowName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ErrorPattern");

                    b.HasIndex("FailedAt");

                    b.HasIndex("Repository");

                    b.ToTable("build_failures", "cicd_monitor");
                });

            modelBuilder.Entity("CodingAgent.Services.CICDMonitor.Domain.Entities.FixAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AttemptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("BuildFailureId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("ErrorPattern")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("PullRequestNumber")
                        .HasColumnType("integer");

                    b.Property<string>("PullRequestUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Repository")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttemptedAt");

                    b.HasIndex("BuildFailureId");

                    b.HasIndex("ErrorPattern");

                    b.HasIndex("Status");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.ToTable("fix_attempts", "cicd_monitor");
                });

            modelBuilder.Entity("CodingAgent.Services.CICDMonitor.Domain.Entities.FixAttempt", b =>
                {
                    b.HasOne("CodingAgent.Services.CICDMonitor.Domain.Entities.BuildFailure", "BuildFailure")
                        .WithMany()
                        .HasForeignKey("BuildFailureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BuildFailure");
                });
#pragma warning restore 612, 618
        }
    }
}
