[tool.poetry]
name = "ml-classifier-service"
version = "2.0.0"
description = "Task classification service using heuristic and ML approaches"
authors = ["Coding Agent Team"]
readme = "README.md"
packages = [{include = "ml_classifier_service", from = "."}]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.32.0"}
pydantic = "^2.9.2"
pydantic-settings = "^2.6.0"
prometheus-fastapi-instrumentator = "^6.1.0"
httpx = "^0.27.2"
# Future ML dependencies (prepared for Phase 2)
scikit-learn = {version = "^1.5.2", optional = true}
xgboost = {version = "^2.1.1", optional = true}
numpy = {version = "^2.1.2", optional = true}
pandas = {version = "^2.2.3", optional = true}
# Future database support (prepared for Phase 2)
asyncpg = {version = "^0.29.0", optional = true}
sqlalchemy = {version = "^2.0.35", optional = true}
alembic = {version = "^1.13.3", optional = true}
# Future caching support (prepared for Phase 2)
redis = {version = "^5.1.1", optional = true}
# Future messaging support (prepared for Phase 2)
pika = {version = "^1.3.2", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"
httpx = "^0.27.2"

[tool.poetry.extras]
ml = ["scikit-learn", "xgboost", "numpy", "pandas"]
database = ["asyncpg", "sqlalchemy", "alembic"]
cache = ["redis"]
messaging = ["pika"]
all = ["scikit-learn", "xgboost", "numpy", "pandas", "asyncpg", "sqlalchemy", "alembic", "redis", "pika"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
addopts = "-v --strict-markers"

[tool.coverage.run]
source = ["ml_classifier_service"]
omit = [
    "*/tests/*",
    "*/conftest.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
