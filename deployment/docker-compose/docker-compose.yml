# ============================================
# Production Docker Compose Configuration
# Coding Agent - Microservices Platform
# ============================================

networks:
  coding-agent:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  ollama_data:

services:
  # ==========================================
  # Database - PostgreSQL
  # ==========================================
  postgres:
    image: postgres:16-alpine
    container_name: coding-agent-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-codingagent}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devPassword123!}
      POSTGRES_DB: ${POSTGRES_DB:-codingagent}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - coding-agent
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-codingagent} -d ${POSTGRES_DB:-codingagent}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # Cache - Redis
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: coding-agent-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-devPassword123!}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - coding-agent
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # Message Queue - RabbitMQ
  # ==========================================
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: coding-agent-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-codingagent}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-devPassword123!}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-/}
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648"
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
      - "15692:15692" # Prometheus metrics
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq-enabled-plugins:/etc/rabbitmq/enabled_plugins:ro
    networks:
      - coding-agent
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # Metrics - Prometheus
  # ==========================================
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: coding-agent-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    networks:
      - coding-agent
    healthcheck:
      test: ["CMD-SHELL", "if command -v wget >/dev/null 2>&1; then wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy; elif command -v curl >/dev/null 2>&1; then curl -fsS http://localhost:9090/-/healthy >/dev/null; else echo 'no http client' >&2 && exit 1; fi"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # Alert Management - Alertmanager
  # ==========================================
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: coding-agent-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      - coding-agent
    healthcheck:
      test: ["CMD-SHELL", "if command -v wget >/dev/null 2>&1; then wget --no-verbose --tries=1 --spider http://localhost:9093/-/healthy; elif command -v curl >/dev/null 2>&1; then curl -fsS http://localhost:9093/-/healthy >/dev/null; else echo 'no http client' >&2 && exit 1; fi"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # Dashboards - Grafana
  # ==========================================
  grafana:
    image: grafana/grafana:10.2.2
    container_name: coding-agent-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_SERVER_ROOT_URL: http://localhost:3000
      GF_AUTH_ANONYMOUS_ENABLED: "false"
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - coding-agent
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "if command -v wget >/dev/null 2>&1; then wget --no-verbose --tries=1 --spider http://localhost:3000/api/health; elif command -v curl >/dev/null 2>&1; then curl -fsS http://localhost:3000/api/health >/dev/null; else echo 'no http client' >&2 && exit 1; fi"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # Distributed Tracing - Jaeger
  # ==========================================
  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: coding-agent-jaeger
    restart: unless-stopped
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
      COLLECTOR_OTLP_ENABLED: "true"
      SPAN_STORAGE_TYPE: memory
    ports:
      - "5775:5775/udp"  # zipkin.thrift over compact thrift protocol
      - "6831:6831/udp"  # jaeger.thrift over compact thrift protocol
      - "6832:6832/udp"  # jaeger.thrift over binary thrift protocol
      - "5778:5778"      # serve configs
      - "16686:16686"    # Jaeger UI
      - "14250:14250"    # gRPC
      - "14268:14268"    # HTTP collector
      - "14269:14269"    # HTTP health check
      - "4317:4317"      # OTLP gRPC
      - "4318:4318"      # OTLP HTTP
      - "9411:9411"      # Zipkin compatible endpoint
    networks:
      - coding-agent
    healthcheck:
      test: ["CMD-SHELL", "if command -v wget >/dev/null 2>&1; then wget --no-verbose --tries=1 --spider http://localhost:14269/; elif command -v curl >/dev/null 2>&1; then curl -fsS http://localhost:14269/ >/dev/null; else echo 'no http client' >&2 && exit 1; fi"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # Structured Logging - Seq
  # ==========================================
  seq:
    image: datalust/seq:2023.4
    container_name: coding-agent-seq
    restart: unless-stopped
    environment:
      ACCEPT_EULA: "Y"
    ports:
      - "5341:80"      # Seq UI and ingestion
    networks:
      - coding-agent
    healthcheck:
      disable: true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # PostgreSQL Exporter - Metrics
  # ==========================================
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: coding-agent-postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-codingagent}:${POSTGRES_PASSWORD:-devPassword123!}@postgres:5432/${POSTGRES_DB:-codingagent}?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - coding-agent
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "if command -v wget >/dev/null 2>&1; then wget --no-verbose --tries=1 --spider http://localhost:9187/; elif command -v curl >/dev/null 2>&1; then curl -fsS http://localhost:9187/ >/dev/null; else echo 'no http client' >&2 && exit 1; fi"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # Redis Exporter - Metrics
  # ==========================================
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: coding-agent-redis-exporter
    restart: unless-stopped
    environment:
      REDIS_ADDR: "redis:6379"
      REDIS_PASSWORD: "${REDIS_PASSWORD:-devPassword123!}"
    ports:
      - "9121:9121"
    networks:
      - coding-agent
    depends_on:
      - redis
    healthcheck:
      disable: true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # Node Exporter - Host Metrics
  # ==========================================
  node-exporter:
    image: prom/node-exporter:v1.8.2
    container_name: coding-agent-node-exporter
    restart: unless-stopped
    pid: host
    command:
      - '--path.rootfs=/host'
    volumes:
      - /:/host:ro
    ports:
      - '9100:9100'
    networks:
      - coding-agent
    healthcheck:
      test: ["CMD-SHELL", "if command -v wget >/dev/null 2>&1; then wget --no-verbose --tries=1 --spider http://localhost:9100/metrics; elif command -v curl >/dev/null 2>&1; then curl -fsS http://localhost:9100/metrics >/dev/null; else echo 'no http client' >&2 && exit 1; fi"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # cAdvisor - Container Metrics
  # ==========================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: coding-agent-cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - "/dev/kmsg"
    command:
      - '--docker_only=true'
      - '--store_container_labels=true'
    volumes:
      - '/:/rootfs:ro'
      - '/var/run:/var/run:ro'
      - '/sys:/sys:ro'
      - '/var/lib/docker/:/var/lib/docker:ro'
      - '/var/lib/containerd:/var/lib/containerd:ro'
      - '/run/containerd:/run/containerd:ro'
      - '/dev/disk/:/dev/disk:ro'
    ports:
      - '8080:8080'
    networks:
      - coding-agent
    healthcheck:
      test: ["CMD-SHELL", "if command -v wget >/dev/null 2>&1; then wget --no-verbose --tries=1 --spider http://localhost:8080/metrics; elif command -v curl >/dev/null 2>&1; then curl -fsS http://localhost:8080/metrics >/dev/null; else echo 'no http client' >&2 && exit 1; fi"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # LLM Backend - Ollama
  # ==========================================
  ollama:
    image: ollama/ollama:latest
    container_name: coding-agent-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - coding-agent
    # GPU support - uncomment for NVIDIA GPUs
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]
    healthcheck:
      # Use ollama CLI which is available in the container
      test: ["CMD-SHELL", "ollama list >/dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
